// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  storeId    String
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  billboardId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[]

  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboard Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  name       String
  price      Int
  isFeatured Boolean
  isArchived Boolean
  storeId    String
  colorId    String
  sizeId     String
  categoryId String
  images     Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  color    Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  size     Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([colorId])
  @@index([sizeId])
  @@index([categoryId])
}

model Image {
  id        String @id @default(uuid())
  url       String
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
